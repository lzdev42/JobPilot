
# GitHub Actions 工作流：持续集成 (CI)
#
# 工作流名称
name: CI Build and Package

# 触发条件：当一个提交被推送到 main 分支时触发
on:
  push:
    branches:
      - 'main'

jobs:
  # --- 构建任务 ---
  # 该任务在一个矩阵中运行，为所有目标平台和架构并行构建应用
  build:
    strategy:
      # 构建矩阵：定义不同的操作系统和架构组合
      matrix:
        # 包含的组合
        include:
          # macOS - Intel (x86_64)
          - os: macos-13
            target: x86_64
            asset_name_prefix: macos-intel

          # macOS - Apple Silicon (ARM64)
          - os: macos-14
            target: aarch64
            asset_name_prefix: macos-arm64

          # Linux (x86_64)
          - os: ubuntu-22.04
            target: x86_64
            asset_name_prefix: linux-x86_64

          # Windows (x86_64)
          - os: windows-2022
            target: x86_64
            asset_name_prefix: windows-x86_64

          # --- ARM 运行器 (需要特定的GitHub付费套餐或自托管运行器) ---
          # 如果您的环境支持，取消以下注释即可启用
          #
          # # Linux (ARM64)
          # - os: ubuntu-latest-arm64 # 运行器名称可能需要根据您的订阅调整
          #   target: aarch64
          #   asset_name_prefix: linux-arm64
          #
          # # Windows (ARM64)
          # - os: windows-latest-arm64 # 运行器名称可能需要根据您的订阅调整
          #   target: aarch64
          #   asset_name_prefix: windows-arm64

    # 指定任务运行的操作系统环境
    runs-on: ${{ matrix.os }}

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 JDK 21 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. (仅Linux/macOS) 赋予 gradlew 执行权限
      - name: Grant execute permission to gradlew
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      # 4. (仅Linux/macOS) 使用Gradle构建和打包
      #    build.gradle.kts中的智能逻辑会根据OS生成 .dmg 或 .AppImage
      - name: Build with Gradle (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: ./gradlew packageReleaseDistributionForCurrentOS

      # 5. (仅Windows) 使用Gradle生成可分发文件夹
      - name: Build with Gradle (Windows)
        if: runner.os == 'Windows'
        run: ./gradlew.bat -Pcompose.desktop.windows.msi.enabled=false :composeApp:createDistributable

      # 6. (仅Windows) 将可分发文件夹压缩为 .zip
      - name: Package Windows distributable into a ZIP
        if: runner.os == 'Windows'
        run: |
          $distDir = "composeApp/build/compose/desktop/distributable"
          $zipFile = "JobPilot-windows-${{ matrix.target }}.zip"
          Compress-Archive -Path "$distDir/*" -DestinationPath $zipFile
        shell: pwsh

      # 7. 从 build.gradle.kts 中提取包版本号
      - name: Get Package Version
        id: get_version
        run: echo "package_version=$(grep 'packageVersion = ' composeApp/build.gradle.kts | cut -d '"' -f 2)" >> $GITHUB_ENV

      # 8. 上传构建产物 (macOS)
      - name: Upload Artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: JobPilot-${{ matrix.asset_name_prefix }}
          path: composeApp/build/compose/desktop/release/xyz.emuci.jobpilot-${{ env.package_version }}.dmg

      # 9. 上传构建产物 (Linux)
      - name: Upload Artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: JobPilot-${{ matrix.asset_name_prefix }}
          path: composeApp/build/compose/desktop/release/xyz.emuci.jobpilot-${{ env.package_version }}.AppImage

      # 10. 上传构建产物 (Windows)
      - name: Upload Artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: JobPilot-${{ matrix.asset_name_prefix }}
          path: JobPilot-windows-${{ matrix.target }}.zip
